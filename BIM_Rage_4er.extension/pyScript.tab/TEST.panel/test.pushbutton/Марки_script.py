# -*- coding: utf-8 -*-
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–¥–∞
"""

import clr
clr.AddReference('RevitAPI')
clr.AddReference('RevitAPIUI')

from Autodesk.Revit.DB import *
from Autodesk.Revit.UI import *
from pyrevit import script, forms

doc = __revit__.ActiveUIDocument.Document
uidoc = __revit__.ActiveUIDocument
view = doc.ActiveView

def simple_tag_from_active_view():
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–¥–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –≤–∏–¥
    if not view or view.ViewType == ViewType.ProjectBrowser:
        forms.alert("–ê–∫—Ç–∏–≤–Ω—ã–π –≤–∏–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É!")
        return
    
    output = script.get_output()
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –≤–∏–¥–∞
    view_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∏–¥"
    try:
        if hasattr(view, 'Name'):
            view_name = view.Name
        elif hasattr(view, 'ViewName'):
            view_name = view.ViewName
    except:
        view_name = "–ê–∫—Ç–∏–≤–Ω—ã–π –≤–∏–¥"
    
    output.print_md("# üè∑Ô∏è –ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–¥–∞")
    output.print_md("**–í–∏–¥:** {}".format(view_name))
    output.print_md("---")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–¥–∞
    categories_count = {}
    try:
        elements_collector = FilteredElementCollector(doc, view.Id).WhereElementIsNotElementType()
        
        for element in elements_collector:
            if element and element.Category:
                cat_name = element.Category.Name
                categories_count[cat_name] = categories_count.get(cat_name, 0) + 1
    except Exception as e:
        forms.alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {}".format(str(e)))
        return
    
    if not categories_count:
        forms.alert("–ù–∞ –∞–∫—Ç–∏–≤–Ω–æ–º –≤–∏–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤!")
        return
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
    category_options = []
    for cat_name, count in sorted(categories_count.items(), key=lambda x: x[1], reverse=True):
        category_options.append("{} ({} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)".format(cat_name, count))
    
    # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    selected_options = forms.SelectFromList.show(
        category_options,
        title="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏",
        multiselect=True,
        button_name='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'
    )
    
    if not selected_options:
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    selected_categories = []
    for option in selected_options:
        category_name = option.split(" (")[0]
        selected_categories.append(category_name)
    
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –º–∞—Ä–∫–∏
    tag_options = {}
    try:
        tag_types_collector = FilteredElementCollector(doc).OfClass(FamilySymbol)
        tag_types_collector = tag_types_collector.OfCategory(BuiltInCategory.OST_GenericAnnotation)
        
        for tag_type in tag_types_collector:
            if tag_type and tag_type.Family:
                key = "{} : {}".format(tag_type.Family.Name, tag_type.Name)
                tag_options[key] = tag_type
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–ø–æ–≤ –º–∞—Ä–æ–∫: {}".format(e))
    
    selected_tag_type = None
    if tag_options:
        selected_tag_key = forms.SelectFromList.show(
            sorted(tag_options.keys()),
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Ä–∫–∏",
            button_name='–í—ã–±—Ä–∞—Ç—å'
        )
        
        if not selected_tag_key:
            return
        
        selected_tag_type = tag_options[selected_tag_key]
    else:
        forms.alert("–í –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–∏–ø–æ–≤ –º–∞—Ä–æ–∫. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∏–ø.")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–Ω–æ—Å–æ–∫
    try:
        leader_option = forms.alert(
            "–î–æ–±–∞–≤–ª—è—Ç—å –≤—ã–Ω–æ—Å–∫–∏ –∫ –º–∞—Ä–∫–∞–º?",
            yes=True, no=True,
            yes_name="–° –≤—ã–Ω–æ—Å–∫–∞–º–∏", 
            no_name="–ë–µ–∑ –≤—ã–Ω–æ—Å–æ–∫"
        )
        has_leader = leader_option
    except:
        has_leader = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –≤—ã–Ω–æ—Å–∫–∞–º–∏
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–∏ –Ω–∞ –≤–∏–¥–µ
    tagged_elements = set()
    try:
        existing_tags = FilteredElementCollector(doc, view.Id).OfClass(IndependentTag).ToElements()
        
        for tag in existing_tags:
            try:
                if hasattr(tag, 'TaggedLocalElementId'):
                    tagged_elements.add(tag.TaggedLocalElementId)
                elif hasattr(tag, 'GetTaggedLocalElementIds'):
                    element_ids = tag.GetTaggedLocalElementIds()
                    for elem_id in element_ids:
                        tagged_elements.add(elem_id)
            except:
                pass
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ä–æ–∫: {}".format(e))
    
    # –°–æ–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑ –º–∞—Ä–æ–∫
    elements_to_tag = []
    try:
        for element in elements_collector:
            if element and element.Category and element.Category.Name in selected_categories:
                if element.Id not in tagged_elements:
                    elements_to_tag.append(element)
    except Exception as e:
        forms.alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {}".format(str(e)))
        return
    
    if not elements_to_tag:
        forms.alert("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –º–∞—Ä–æ–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π!")
        return
    
    output.print_md("**–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏:** {}".format(len(elements_to_tag)))
    output.print_md("**–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:** {}".format(", ".join(selected_categories)))
    if selected_tag_type:
        output.print_md("**–¢–∏–ø –º–∞—Ä–∫–∏:** {} : {}".format(selected_tag_type.Family.Name, selected_tag_type.Name))
    output.print_md("**–í—ã–Ω–æ—Å–∫–∏:** {}".format("–î–∞" if has_leader else "–ù–µ—Ç"))
    output.print_md("---")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É
    success_count = 0
    failed_count = 0
    
    with Transaction(doc, "–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–∏–¥–∞") as t:
        t.Start()
        
        for i, element in enumerate(elements_to_tag):
            try:
                output.print_html("–ú–∞—Ä–∫–∏—Ä—É–µ—Ç—Å—è <b>{}</b> - {} –∏–∑ {}".format(
                    element.Category.Name, i+1, len(elements_to_tag)))
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –º–∞—Ä–∫–∏
                tag_position = XYZ(0, 0, 0)
                try:
                    bbox = element.get_BoundingBox(view)
                    if bbox:
                        # –†–∞–∑–º–µ—â–∞–µ–º –º–∞—Ä–∫—É –Ω–∏–∂–µ —ç–ª–µ–º–µ–Ω—Ç–∞
                        tag_position = XYZ((bbox.Min.X + bbox.Max.X) / 2, bbox.Min.Y - 2.0, 0)
                    else:
                        loc = element.Location
                        if loc:
                            if isinstance(loc, LocationPoint):
                                tag_position = loc.Point
                            elif isinstance(loc, LocationCurve):
                                curve = loc.Curve
                                tag_position = curve.Evaluate(0.5, True)
                except:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    pass
                
                # –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫—É
                tag = IndependentTag.Create(
                    doc, 
                    view.Id, 
                    Reference(element), 
                    has_leader, 
                    TagOrientation.Horizontal, 
                    tag_position
                )
                
                if tag:
                    if selected_tag_type:
                        tag.ChangeTypeId(selected_tag_type.Id)
                    success_count += 1
                    output.print_html("‚úÖ <span style='color:green'>–£—Å–ø–µ—à–Ω–æ</span>")
                else:
                    failed_count += 1
                    output.print_html("‚ùå <span style='color:red'>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è</span>")
                    
            except Exception as e:
                failed_count += 1
                output.print_html("‚ùå <span style='color:red'>–û—à–∏–±–∫–∞: {}</span>".format(str(e)))
                continue
        
        t.Commit()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    output.print_md("---")
    output.print_md("## üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏:")
    output.print_md("- **–í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:** {}".format(len(elements_to_tag)))
    output.print_md("- **–£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–æ –º–∞—Ä–æ–∫:** {}".format(success_count))
    output.print_md("- **–û—à–∏–±–æ–∫:** {}".format(failed_count))
    
    if success_count > 0:
        output.print_md("### ‚úÖ –ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        forms.alert("–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–æ –º–∞—Ä–æ–∫: {}".format(success_count))
    else:
        output.print_md("### ‚ùå –ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        forms.alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –º–∞—Ä–∫–∏!")

# –ó–∞–ø—É—Å–∫
try:
    simple_tag_from_active_view()
except Exception as e:
    forms.alert("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {}".format(str(e)))